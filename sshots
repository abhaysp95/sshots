#!/usr/bin/env sh

declare -a sshots_options=(
"Fullscreen"
"Active Window"
"Selected Region(Range)"
"Delay(Fullscreen)"
"Delay(Window)"
"Fullscreen(copy only)"
"Active Window(copy only)"
"Selected Region(copy only)"
"Delay(Fullscreen + copy only)"
"Delay(Window + copy only)"
"Fullscreen(screenshot + copy)"
"Active Window(screenshot + copy)"
"Selected Region(screenshot + copy)"
"Delay(Fullscreen + screenshot + copy)"
"Delay(Window + screenshot + copy)"
"Quit"
)

quality=100
sshots_dir="${HOME}/Pictures/Screenshots/$(date +"%Y-%m")"
sshots_file="${sshots_dir}/$(date +"%Y-%m-%d_%H%M%S").png"
background_frame_color="#abb2bf"
delay_time="5"

function post_operation() {
	message="$(printf "${stype} type\nScreenshot Captured")"
	img="$(readlink -f "${sshots_file}")"
	notify-send --icon="${img}" -t 3000 "${message}"
}

function check_dir() {
	if [ ! -d "${sshots_dir}" ]; then
		mkdir -p "${sshots_dir}"
	fi
}

function full_sshot() {
	check_dir
	stype="Full"
	sleep 0.2  # if not dmenu also comes in screenshot
	maim -u -f png | convert - \
		\( +clone -background black -shadow 100x8+1+2 \) \
		-quality 100 +swap -background "${background_frame_color}" \
		-layers merge +repage "${sshots_file}"
	post_operation
}

function active_window_sshot() {
	check_dir
	stype="Window"
	maim -u -f png -i "$(xdotool getactivewindow)" | convert - \
		\( +clone -background black -shadow 100x8+1+2 \) \
		-quality 100 +swap -background "${background_frame_color}" \
		-layers merge +repage "${sshots_file}" 2>/dev/null
	post_operation
}

function selected_region_sshot() {
	check_dir
	stype="Range"
	maim -u -f png -s -t 10 | convert - \
		\( +clone -background black -shadow 100x8+1+2 \) \
		-quality 100 +swap -background "${background_frame_color}" \
		-layers merge +repage "${sshots_file}"
		# if you are using any compositor(picom compton), then exclude blur background for slop
		# blur-background-exclude = [
			# "class_g = 'slop'",
		# ];
	post_operation 2>/dev/null
}

function delay_sshot() {
	check_dir
	if [ "$1" == "--full" ] || [ "$1" == "-f" ]; then
		full_sshot
	elif [ "$1" == "--window" ] || [ "$1" == "-w" ]; then
		active_window_sshot
	else
		full_sshot # take full screenshot
	fi
}

function dmenu_sshot() {
	choice=$(printf '%s\n' "${sshots_options[@]}" | dmenu -i -l 17 -c -p 'Take Screenshot: ')

	case "${choice}" in
		"Fullscreen")
			full_sshot ;;
		"Active Window" )
			active_window_sshot ;;
		"Selected Region(Range)" )
			selected_region_sshot ;;
		"Delay(Fullscreen)" )
			delay_sshot --full ;;
		"Delay(Window)" )
			delay_sshot --window ;;
		"Fullscreen(copy only)" )
			full_sshot
			xclip -selection clipboard -t image/png "${sshots_file}"
			rm "${sshots_file}" ;;
		"Active Window(copy only)" )
			active_window_sshot
			xclip -selection clipboard -t image/png "${sshots_file}"
			rm "${sshots_file}" ;;
		"Selected Region(copy only)" )
			selected_region_sshot
			xclip -selection clipboard -t image/png "${sshots_file}"
			rm "${sshots_file}" ;;
		"Delay(Fullscreen + copy only)" )
			delay_sshot --full
			xclip -selection clipboard -t image/png "${sshots_file}"
			rm "${sshots_file}" ;;
		"Delay(Window + copy only)" )
			delay_sshot --window
			xclip -selection clipboard -t image/png "${sshots_file}"
			rm "${sshots_file}" ;;
		"Fullscreen(screenshot + copy)" )
			full_sshot
			xclip -selection clipboard -t image/png "${sshots_file}" ;;
		"Active Window(screenshot + copy)" )
			active_window_sshot
			xclip -selection clipboard -t image/png "${sshots_file}" ;;
		"Selected Region(screenshot + copy)" )
			selected_region_sshot
			xclip -selection clipboard -t image/png "${sshots_file}" ;;
		"Delay(Fullscreen + screenshot + copy only)" )
			delay_sshot --full
			xclip -selection clipboard -t image/png "${sshots_file}" ;;
		"Delay(Window + screenshot + copy only)" )
			delay_sshot --window
			xclip -selection clipboard -t image/png "${sshots_file}" ;;
		"Quit" ) notify-send -t 1500 "Nothing selected for screenshot" ;;
		*) exit 1;
	esac
}

function get_help() {
	echo "Usage: sshots [option]"
	echo "Script to take screenshots in various manner"
	echo ""
	echo "When no option provided, takes full screen screenshot"
	echo ""
	echo "  -dm,  --dmenu          Show dmenu prompt with options to take screenshots"
	echo "                         Options are:"
	echo "                         Fullscreen"
	echo "                         Active Window"
	echo "                         Selected Region(Range)"
	echo "                         Delay(Fullscreen)"
	echo "                         Delay(Window)"
	echo "                         Fullscreen(copy only)"
	echo "                         Active Window(copy only)"
	echo "                         Selected Region(copy only)"
	echo "                         Delay(Fullscreen + copy only)"
	echo "                         Delay(Window + copy only)"
	echo "                         Fullscreen(screenshot + copy)"
	echo "                         Active Window(screenshot + copy)"
	echo "                         Selected Region(screenshot + copy)"
	echo "                         Delay(Fullscreen + screenshot + copy)"
	echo "                         Delay(Window + screenshot + copy)"
	echo "                         Quit"
	echo "  -f,  --full            Take Fullscreen screenshot"
	echo "  -w,  --window          Take active window screenshot"
	echo "  -r,  --range           Take selected regions screenshot"
	echo "  -dl, --delay [-f/-w]   Take screenshot with delay(default: 5 sec)"
	echo "                         You can give --full/-f or --window/-w option for delay"
	echo "                         If no option provided it'll take full screen screenshot"
	echo "  -h,  --help            Show help"
	echo "Examples:"
	echo "  sshots --full"
	echo "  sshots --delay --window"
	echo ""
	echo "Assign shortcut keys(key-bindings) to the various options of this script for best usage"
}

case "$1" in
	--dmenu|-dm  ) dmenu_sshot ;;
	--full|-f|"" ) full_sshot ;;
	--window|-w  ) active_window_sshot ;;
	--range|-r   ) selected_region_sshot ;;
	--delay|-dl  ) shift
		delay_sshot "$1" ;;
	--help|-h    ) get_help && exit 0 ;;
	*            ) echo "give correct argument" && exit 1 ;;
esac
